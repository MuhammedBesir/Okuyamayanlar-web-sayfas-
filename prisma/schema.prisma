generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String           @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                Role             @default(USER)
  bio                 String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  banned              Boolean          @default(false)
  bannedAt            DateTime?
  bannedReason        String?
  username            String           @unique
  verificationExpires DateTime?
  verificationToken   String?          @unique
  accounts            Account[]
  borrowedBooks       Book[]           @relation("BorrowedBooks")
  eventComments       EventComment[]
  eventPhotos         EventPhoto[]
  eventRSVPs          EventRSVP[]
  forumReplies        ForumReply[]
  forumReplyLikes     ForumReplyLike[]
  forumTopicLikes     ForumTopicLike[]
  forumTopics         ForumTopic[]
  notifications       Notification[]
  readingLists        ReadingList[]
  reviews             Review[]
  sessions            Session[]
  userBadges          UserBadge[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_resets")
}

model BorrowLog {
  id         String    @id @default(cuid())
  bookId     String
  bookTitle  String
  bookAuthor String
  userId     String
  userName   String
  userEmail  String
  borrowedAt DateTime  @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  status     String    @default("BORROWED")
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("borrow_logs")
}

model Book {
  id            String        @id @default(cuid())
  title         String
  author        String
  description   String?
  coverImage    String?
  isbn          String?       @unique
  publishedYear Int?
  genre         String?
  pageCount     Int?
  language      String        @default("Turkish")
  featured      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  available     Boolean       @default(true)
  borrowedAt    DateTime?
  borrowedBy    String?
  dueDate       DateTime?
  borrower      User?         @relation("BorrowedBooks", fields: [borrowedBy], references: [id])
  featuredBook  FeaturedBook?
  readingLists  ReadingList[]
  reviews       Review[]

  @@map("books")
}

model ReadingList {
  id         String    @id @default(cuid())
  userId     String
  bookId     String
  status     String    @default("want-to-read")
  progress   Int       @default(0)
  startedAt  DateTime?
  finishedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  book       Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("reading_lists")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Event {
  id           String         @id @default(cuid())
  title        String
  description  String?
  location     String?
  isOnline     Boolean        @default(false)
  startDate    DateTime
  endDate      DateTime?
  image        String?
  maxAttendees Int?
  status       EventStatus    @default(UPCOMING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  eventType    String?
  time         String?
  featured     Boolean        @default(false)
  locationLat  Float?
  locationLng  Float?
  comments     EventComment[]
  photos       EventPhoto[]
  rsvps        EventRSVP[]

  @@map("events")
}

model EventRSVP {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    String   @default("going")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_rsvps")
}

model EventComment {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  content   String
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_comments")
}

model EventPhoto {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  url       String
  caption   String?
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_photos")
}

model ForumTopic {
  id        String           @id @default(cuid())
  title     String
  content   String
  userId    String
  pinned    Boolean          @default(false)
  locked    Boolean          @default(false)
  views     Int              @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  category  String?
  image     String?
  edited    Boolean          @default(false)
  featured  Boolean          @default(false)
  replies   ForumReply[]
  likes     ForumTopicLike[]
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forum_topics")
}

model ForumReply {
  id            String           @id @default(cuid())
  content       String
  userId        String
  topicId       String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  image         String?
  link          String?
  edited        Boolean          @default(false)
  parentReplyId String?
  parentReply   ForumReply?      @relation("ReplyToReply", fields: [parentReplyId], references: [id], onDelete: Cascade)
  replies       ForumReply[]     @relation("ReplyToReply")
  topic         ForumTopic       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         ForumReplyLike[]

  @@map("forum_replies")
}

model ForumTopicLike {
  id        String     @id @default(cuid())
  userId    String
  topicId   String
  createdAt DateTime   @default(now())
  topic     ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("forum_topic_likes")
}

model ForumReplyLike {
  id        String     @id @default(cuid())
  userId    String
  replyId   String
  createdAt DateTime   @default(now())
  reply     ForumReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@map("forum_reply_likes")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model FeaturedBook {
  id          String    @id @default(cuid())
  bookId      String    @unique
  title       String
  author      String
  coverImage  String
  category    String?
  description String
  rating      Float?
  reviewCount Int       @default(0)
  readers     Int       @default(0)
  quote       String?
  pages       Int?
  genre       String?
  badge       String?
  startDate   DateTime  @default(now())
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  book        Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("featured_books")
}

model Badge {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  icon        String
  color       String
  category    BadgeCategory
  requirement Int?
  isActive    Boolean       @default(true)
  isSpecial   Boolean       @default(false)
  isImportant Boolean       @default(false)
  order       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userBadges  UserBadge[]

  @@map("badges")
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  progress Int?
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

enum Role {
  USER
  ADMIN
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum BadgeCategory {
  READING
  FORUM
  EVENT
  PROFILE
  SPECIAL
  ACHIEVEMENT
}
