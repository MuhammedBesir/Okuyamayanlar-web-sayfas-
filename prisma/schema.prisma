// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  username            String    @unique // Kullanıcı adı (zorunlu ve unique)
  email               String    @unique
  emailVerified       DateTime? // Email onaylandı mı?
  verificationToken   String?   @unique // Email onaylama token'ı
  verificationExpires DateTime? // Token'ın son kullanma tarihi
  image               String?
  password            String?
  role                Role      @default(USER)
  bio                 String?
  banned              Boolean   @default(false)
  bannedAt            DateTime?
  bannedReason        String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  borrowedBooks  Book[]           @relation("BorrowedBooks")
  readingLists   ReadingList[]
  reviews        Review[]
  forumTopics    ForumTopic[]
  forumReplies   ForumReply[]
  forumTopicLikes ForumTopicLike[]
  forumReplyLikes ForumReplyLike[]
  eventRSVPs     EventRSVP[]
  eventComments  EventComment[]
  eventPhotos    EventPhoto[]
  notifications  Notification[]
  userBadges     UserBadge[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_resets")
}

model BorrowLog {
  id          String    @id @default(cuid())
  bookId      String
  bookTitle   String
  bookAuthor  String
  userId      String
  userName    String
  userEmail   String
  borrowedAt  DateTime  @default(now())
  dueDate     DateTime
  returnedAt  DateTime?
  status      String    @default("BORROWED") // BORROWED, RETURNED, OVERDUE
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("borrow_logs")
}

model Book {
  id            String    @id @default(cuid())
  title         String
  author        String
  description   String?
  coverImage    String?
  isbn          String?   @unique
  publishedYear Int?
  genre         String?
  pageCount     Int?
  language      String    @default("Turkish")
  featured      Boolean   @default(false)
  available     Boolean   @default(true) // Ödünç alınabilir mi?
  borrowedBy    String? // Ödünç alan kullanıcı
  borrowedAt    DateTime? // Ödünç alınma tarihi
  dueDate       DateTime? // İade tarihi
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  borrower     User?         @relation("BorrowedBooks", fields: [borrowedBy], references: [id])
  readingLists ReadingList[]
  reviews      Review[]
  featuredBook FeaturedBook?

  @@map("books")
}

model ReadingList {
  id         String    @id @default(cuid())
  userId     String
  bookId     String
  status     String    @default("want-to-read") // "want-to-read", "reading", "completed"
  progress   Int       @default(0)
  startedAt  DateTime?
  finishedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("reading_lists")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Event {
  id           String      @id @default(cuid())
  title        String
  description  String?
  location     String?
  locationLat  Float? // Google Maps enlem
  locationLng  Float? // Google Maps boylam
  isOnline     Boolean     @default(false)
  startDate    DateTime
  endDate      DateTime?
  time         String? // Örn: "14:00 - 16:00"
  eventType    String? // "Söyleşi", "Kitap Ortağım", "Kafamda Deli Sorular", vb.
  image        String?
  maxAttendees Int?
  status       EventStatus @default(UPCOMING)
  featured     Boolean     @default(false) // Ana sayfada öne çıkarılacak mı?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  rsvps    EventRSVP[]
  comments EventComment[]
  photos   EventPhoto[]

  @@map("events")
}

model EventRSVP {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    String   @default("going") // "going", "interested", "not-going"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_rsvps")
}

model EventComment {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  content   String
  rating    Int? // 1-5 yıldız, opsiyonel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_comments")
}

model EventPhoto {
  id          String   @id @default(cuid())
  eventId     String
  userId      String
  url         String
  caption     String?
  createdAt   DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_photos")
}

model ForumTopic {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String?
  image     String?
  userId    String
  pinned    Boolean  @default(false)
  locked    Boolean  @default(false)
  featured  Boolean  @default(false)
  views     Int      @default(0)
  edited    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies ForumReply[]
  likes   ForumTopicLike[]

  @@map("forum_topics")
}

model ForumReply {
  id            String   @id @default(cuid())
  content       String
  image         String?
  link          String?
  userId        String
  topicId       String
  parentReplyId String?
  edited        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic       ForumTopic   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  parentReply ForumReply?  @relation("ReplyToReply", fields: [parentReplyId], references: [id], onDelete: Cascade)
  replies     ForumReply[] @relation("ReplyToReply")
  likes       ForumReplyLike[]

  @@map("forum_replies")
}

model ForumTopicLike {
  id        String   @id @default(cuid())
  userId    String
  topicId   String
  createdAt DateTime @default(now())

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("forum_topic_likes")
}

model ForumReplyLike {
  id        String   @id @default(cuid())
  userId    String
  replyId   String
  createdAt DateTime @default(now())

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reply ForumReply @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@map("forum_reply_likes")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model FeaturedBook {
  id          String   @id @default(cuid())
  bookId      String   @unique
  title       String
  author      String
  coverImage  String
  category    String?
  description String
  rating      Float?
  reviewCount Int      @default(0)
  readers     Int      @default(0)
  quote       String?
  pages       Int?
  genre       String?
  badge       String?
  startDate   DateTime @default(now())
  endDate     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("featured_books")
}

enum BadgeCategory {
  READING       // Kitap okuma rozetleri
  FORUM         // Forum aktivite rozetleri
  EVENT         // Etkinlik katılım rozetleri
  PROFILE       // Profil tamamlama rozetleri
  SPECIAL       // Özel rozetler (admin tarafından verilen)
  ACHIEVEMENT   // Başarı rozetleri
}

model Badge {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  icon        String        // Emoji veya icon adı
  color       String        // Hex color code
  category    BadgeCategory
  requirement Int?          // Gereken sayı (örn: 10 kitap, 50 forum yanıtı)
  isActive    Boolean       @default(true)
  isSpecial   Boolean       @default(false) // Sadece admin verebilir mi?
  order       Int           @default(0)     // Gösterim sırası
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  progress  Int?     // İlerleme durumu (opsiyonel)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}
